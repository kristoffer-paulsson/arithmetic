/**
 * Reference arithmetic coding
 *
 * Copyright (c) 2025 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
 *
 * Copyright (c) Project Nayuki
 * https://www.nayuki.io/page/reference-arithmetic-coding
 *
 * This software is available under the terms of the MIT license.
 * The legal terms are attached to the LICENSE file and are made
 * available on:
 *
 *      https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *
 * Contributors:
 *      Nayuki - initial Java implementation
 *      Kristoffer Paulsson - porting and adaption to Kotlin for alternative use
 */
package org.example.arithmetic

import org.example.arithmetic.io.BitInput
import org.example.arithmetic.io.ByteOutput

/**
 * Decompression application using prediction by partial matching (PPM) with arithmetic coding.
 *
 * Usage: java PpmDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "PpmCompress" application.
 */
public abstract class AbstractPpmDecompress {

    // To allow unit testing, this method is package-private instead of private.
    public fun decompress(inp: BitInput, out: ByteOutput) {
        // Set up decoder and model. In this PPM model, symbol 256 represents EOF;
        // its frequency is 1 in the order -1 context but its frequency
        // is 0 in all other contexts (which have non-negative order).
        val dec = ArithmeticDecoder(32, inp)
        val model = PpmModel(MODEL_ORDER, 257, 256)
        val history = mutableListOf<Int>()

        while (true) {
            // Decode and write one byte
            val symbol = decodeSymbol(dec, model, history)
            if (symbol == 256)  // EOF symbol
                break
            out.write(symbol)
            model.incrementContexts(history, symbol)

            if (model.modelOrder >= 1) {
                // Prepend current symbol, dropping oldest symbol if necessary
                history.add(symbol)
                if (history.size >= model.modelOrder) history.removeLast()
            }
        }
    }

    private fun decodeSymbol(dec: ArithmeticDecoder, model: PpmModel, history: MutableList<Int>): Int {
        // Try to use highest order context that exists based on the history suffix. When symbol 256
        // is consumed at a context at any non-negative order, it means "escape to the next lower order
        // with non-empty context". When symbol 256 is consumed at the order -1 context, it means "EOF".
        outer@ for (order in history.size downTo 0) {
            var ctx: PpmModel.Context = model.rootContext
            for (i in 0..<order) {
                if (ctx.subcontexts.isEmpty()) throw AssertionError()
                ctx = ctx.subcontexts[history[i]]
                if (ctx === PpmModel.nullCtx) continue@outer
            }
            val symbol: Int = dec.read(ctx.frequencies)
            if (symbol < 256) return symbol
            // Else we read the context escape symbol, so continue decrementing the order
        }
        // Logic for order = -1
        return dec.read(model.orderMinus1Freqs)
    }

    public companion object {
        // Must be at least -1 and match PpmCompress. Warning: Exponential memory usage at O(257^n).
        private const val MODEL_ORDER = 3
    }
}
