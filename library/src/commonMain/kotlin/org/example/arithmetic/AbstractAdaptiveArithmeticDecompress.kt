/**
 * Reference arithmetic coding
 *
 * Copyright (c) 2025 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
 *
 * Copyright (c) Project Nayuki
 * https://www.nayuki.io/page/reference-arithmetic-coding
 *
 * This software is available under the terms of the MIT license.
 * The legal terms are attached to the LICENSE file and are made
 * available on:
 *
 *      https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *
 * Contributors:
 *      Nayuki - initial Java implementation
 *      Kristoffer Paulsson - porting and adaption to Kotlin for alternative use
 */
package org.example.arithmetic

import org.example.arithmetic.io.BitInput
import org.example.arithmetic.io.ByteOutput


/**
 * Decompression application using adaptive arithmetic coding.
 *
 * Usage: java AdaptiveArithmeticDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "AdaptiveArithmeticCompress" application.
 */
public abstract class AbstractAdaptiveArithmeticDecompress {

    public fun decompress(inp: BitInput, out: ByteOutput) {
        val initFreqs = FlatFrequencyTable(257)
        val freqs: FrequencyTable = SimpleFrequencyTable(initFreqs)
        val dec = ArithmeticDecoder(32, inp)
        while (true) {
            // Decode and write one byte
            val symbol: Int = dec.read(freqs)
            if (symbol == 256)  // EOF symbol
                break
            out.write(symbol)
            freqs.increment(symbol)
        }
    }
}
