/**
 * Reference arithmetic coding
 *
 * Copyright (c) 2025 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
 *
 * Copyright (c) Project Nayuki
 * https://www.nayuki.io/page/reference-arithmetic-coding
 *
 * This software is available under the terms of the MIT license.
 * The legal terms are attached to the LICENSE file and are made
 * available on:
 *
 *      https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *
 * Contributors:
 *      Nayuki - initial Java implementation
 *      Kristoffer Paulsson - porting and adaption to Kotlin for alternative use
 */
package org.example.arithmetic

import java.io.BufferedInputStream
import java.io.BufferedOutputStream
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.IOException
import java.io.OutputStream

/**
 * Decompression application using static arithmetic coding.
 *
 * Usage: java ArithmeticDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "ArithmeticCompress" application.
 */
public object ArithmeticDecompress {
    public fun main(args: Array<String>) {
        // Handle command line arguments
        if (args.size != 2) {
            System.err.println("Usage: java ArithmeticDecompress InputFile OutputFile")
            System.exit(1)
            return
        }
        val inputFile: File = File(args[0])
        val outputFile: File = File(args[1])

        BitInputStream(BufferedInputStream(FileInputStream(inputFile))).use { inp ->
            BufferedOutputStream(FileOutputStream(outputFile)).use { out ->
                val freqs: FrequencyTable = readFrequencies(inp)
                decompress(freqs, inp, out)
            }
        }
    }

    // To allow unit testing, this method is package-private instead of private.
    public fun readFrequencies(inp: BitInputStream): FrequencyTable {
        val freqs = IntArray(257)
        for (i in 0..255) freqs[i] = readInt(inp, 32)
        freqs[256] = 1 // EOF symbol
        return SimpleFrequencyTable(freqs)
    }

    // To allow unit testing, this method is package-private instead of private.
    public fun decompress(freqs: FrequencyTable, inp: BitInputStream, out: OutputStream) {
        val dec: ArithmeticDecoder = ArithmeticDecoder(32, inp)
        while (true) {
            val symbol: Int = dec.read(freqs)
            if (symbol == 256)  // EOF symbol
                break
            out.write(symbol)
        }
    }

    // Reads an unsigned integer of the given bit width from the given stream.
    private fun readInt(inp: BitInputStream, numBits: Int): Int {
        require(0 <= numBits && numBits <= 32)

        var result = 0
        for (i in 0..<numBits) result = (result shl 1) or inp.readNoEof() // Big endian

        return result
    }
}
